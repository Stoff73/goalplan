# GoalPlan Backend Environment Configuration
# Copy this file to .env and update values for your local environment

# =============================================================================
# APPLICATION
# =============================================================================
APP_NAME=GoalPlan API
APP_VERSION=0.1.0
DEBUG=True
ENVIRONMENT=development
TESTING=False

# =============================================================================
# API CONFIGURATION
# =============================================================================
API_V1_PREFIX=/api/v1
# JSON array of allowed CORS hosts (use JSON format for list fields)
ALLOWED_HOSTS=["http://localhost:3000","http://localhost:5173"]

# =============================================================================
# DATABASE - PostgreSQL
# =============================================================================
DATABASE_HOST=localhost
DATABASE_PORT=5432
DATABASE_USER=goalplan_user
DATABASE_PASSWORD=your_secure_password_here
DATABASE_NAME=goalplan_dev
DATABASE_ECHO=False

# Database Connection Pool Settings
DATABASE_POOL_SIZE=5
DATABASE_MAX_OVERFLOW=10
DATABASE_POOL_RECYCLE=3600

# =============================================================================
# REDIS - Caching & Sessions
# =============================================================================
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_DB=0
REDIS_MAX_CONNECTIONS=10

# =============================================================================
# SECURITY - JWT (JSON Web Tokens)
# =============================================================================
# IMPORTANT: Change this to a strong random secret in production
# Generate with: openssl rand -hex 32
JWT_SECRET_KEY=CHANGE_ME_IN_PRODUCTION_USE_STRONG_SECRET_KEY_HERE
JWT_ALGORITHM=HS256
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=15
JWT_REFRESH_TOKEN_EXPIRE_DAYS=7

# PRODUCTION NOTE: Use RS256 with asymmetric keys for production
# JWT_ALGORITHM=RS256
# JWT_PRIVATE_KEY_PATH=/path/to/private_key.pem
# JWT_PUBLIC_KEY_PATH=/path/to/public_key.pem

# =============================================================================
# SECURITY - Password Hashing
# =============================================================================
# Must be argon2 as per CLAUDE.md security requirements
PASSWORD_HASH_ALGORITHM=argon2
PASSWORD_MIN_LENGTH=12

# =============================================================================
# SECURITY - Account Lockout
# =============================================================================
MAX_LOGIN_ATTEMPTS=5
ACCOUNT_LOCKOUT_DURATION_MINUTES=30

# =============================================================================
# SECURITY - Rate Limiting
# =============================================================================
RATE_LIMIT_ENABLED=True
RATE_LIMIT_PER_MINUTE=60

# =============================================================================
# ENCRYPTION - Data at Rest
# =============================================================================
# AES-256 encryption key for sensitive data (account numbers, etc.)
# Generate with: python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
ENCRYPTION_KEY=

# =============================================================================
# DEVELOPMENT NOTES
# =============================================================================
# 1. PostgreSQL Setup:
#    - Install PostgreSQL: brew install postgresql (macOS)
#    - Start service: brew services start postgresql
#    - Create database: createdb goalplan_dev
#    - Create user: createuser -P goalplan_user
#    - Grant privileges: psql -c "GRANT ALL PRIVILEGES ON DATABASE goalplan_dev TO goalplan_user;"
#
# 2. Redis Setup:
#    - Install Redis: brew install redis (macOS)
#    - Start service: brew services start redis
#    - Test connection: redis-cli ping (should return PONG)
#
# 3. Run migrations:
#    - Initialize: alembic upgrade head
#
# 4. Security:
#    - NEVER commit .env file to version control
#    - Use strong passwords in production
#    - Enable SSL/TLS for database connections in production
#    - Use environment variables in production (not .env files)
