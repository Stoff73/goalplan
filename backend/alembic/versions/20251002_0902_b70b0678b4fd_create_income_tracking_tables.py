"""create_income_tracking_tables

Revision ID: b70b0678b4fd
Revises: a6157b39183b
Create Date: 2025-10-02 09:02:51.257977

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'b70b0678b4fd'
down_revision = 'a6157b39183b'
branch_labels = None
depends_on = None


def upgrade() -> None:
    """Upgrade database schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user_profile_history', schema=None) as batch_op:
        batch_op.drop_index('idx_profile_history_changed_at')
        batch_op.drop_index('idx_profile_history_user_changed')

    op.drop_table('user_profile_history')
    with op.batch_alter_table('email_change_tokens', schema=None) as batch_op:
        batch_op.drop_index('idx_email_change_tokens_expires_at')
        batch_op.drop_index('idx_email_change_tokens_token')
        batch_op.drop_index('idx_email_change_tokens_user_id')

    op.drop_table('email_change_tokens')
    with op.batch_alter_table('sa_presence_data', schema=None) as batch_op:
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=None,
               existing_nullable=False)
        batch_op.create_index(batch_op.f('ix_sa_presence_data_user_id'), ['user_id'], unique=False)

    with op.batch_alter_table('uk_srt_data', schema=None) as batch_op:
        batch_op.alter_column('family_tie',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
        batch_op.alter_column('accommodation_tie',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
        batch_op.alter_column('work_tie',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
        batch_op.alter_column('ninety_day_tie',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
        batch_op.alter_column('country_tie',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=None,
               existing_nullable=False)
        batch_op.create_index(batch_op.f('ix_uk_srt_data_user_id'), ['user_id'], unique=False)

    with op.batch_alter_table('user_tax_status', schema=None) as batch_op:
        batch_op.alter_column('uk_split_year_treatment',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
        batch_op.alter_column('uk_remittance_basis',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
        batch_op.alter_column('sa_ordinarily_resident',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
        batch_op.alter_column('dual_resident',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=None,
               existing_nullable=False)
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=None,
               existing_nullable=False)
        batch_op.create_index(batch_op.f('ix_user_tax_status_user_id'), ['user_id'], unique=False)

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('phone',
               existing_type=sa.VARCHAR(length=20),
               comment=None,
               existing_comment='User phone number',
               existing_nullable=True)
        batch_op.alter_column('date_of_birth',
               existing_type=sa.DATE(),
               comment=None,
               existing_comment='User date of birth',
               existing_nullable=True)
        batch_op.alter_column('address',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               comment=None,
               existing_comment='Structured address JSON',
               existing_nullable=True)
        batch_op.alter_column('timezone',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='User timezone preference',
               existing_nullable=False,
               existing_server_default=sa.text("'Europe/London'::character varying"))
        batch_op.alter_column('deleted_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='Soft delete timestamp',
               existing_nullable=True)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade database schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('deleted_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='Soft delete timestamp',
               existing_nullable=True)
        batch_op.alter_column('timezone',
               existing_type=sa.VARCHAR(length=50),
               comment='User timezone preference',
               existing_nullable=False,
               existing_server_default=sa.text("'Europe/London'::character varying"))
        batch_op.alter_column('address',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               comment='Structured address JSON',
               existing_nullable=True)
        batch_op.alter_column('date_of_birth',
               existing_type=sa.DATE(),
               comment='User date of birth',
               existing_nullable=True)
        batch_op.alter_column('phone',
               existing_type=sa.VARCHAR(length=20),
               comment='User phone number',
               existing_nullable=True)

    with op.batch_alter_table('user_tax_status', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_tax_status_user_id'))
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=False)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=False)
        batch_op.alter_column('dual_resident',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=False)
        batch_op.alter_column('sa_ordinarily_resident',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=False)
        batch_op.alter_column('uk_remittance_basis',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=False)
        batch_op.alter_column('uk_split_year_treatment',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=False)

    with op.batch_alter_table('uk_srt_data', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_uk_srt_data_user_id'))
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=False)
        batch_op.alter_column('country_tie',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=False)
        batch_op.alter_column('ninety_day_tie',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=False)
        batch_op.alter_column('work_tie',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=False)
        batch_op.alter_column('accommodation_tie',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=False)
        batch_op.alter_column('family_tie',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=False)

    with op.batch_alter_table('sa_presence_data', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_sa_presence_data_user_id'))
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('CURRENT_TIMESTAMP'),
               existing_nullable=False)

    op.create_table('email_change_tokens',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False, comment='Unique identifier'),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False, comment='User requesting email change'),
    sa.Column('new_email', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='New email address (pending verification)'),
    sa.Column('old_email', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='Current email address (for audit)'),
    sa.Column('token', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='Verification token'),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False, comment='Token expiration timestamp (24 hours)'),
    sa.Column('used', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False, comment='Whether token has been used'),
    sa.Column('used_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='Timestamp when token was used'),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Token creation timestamp'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='email_change_tokens_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='email_change_tokens_pkey'),
    sa.UniqueConstraint('token', name='email_change_tokens_token_key'),
    comment='Tokens for email change verification'
    )
    with op.batch_alter_table('email_change_tokens', schema=None) as batch_op:
        batch_op.create_index('idx_email_change_tokens_user_id', ['user_id'], unique=False)
        batch_op.create_index('idx_email_change_tokens_token', ['token'], unique=True)
        batch_op.create_index('idx_email_change_tokens_expires_at', ['expires_at'], unique=False)

    op.create_table('user_profile_history',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False, comment='Unique identifier'),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False, comment='User whose profile was changed'),
    sa.Column('field_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False, comment='Name of the field that was changed'),
    sa.Column('old_value', sa.TEXT(), autoincrement=False, nullable=True, comment='Previous value (serialized as text)'),
    sa.Column('new_value', sa.TEXT(), autoincrement=False, nullable=True, comment='New value (serialized as text)'),
    sa.Column('changed_by', sa.UUID(), autoincrement=False, nullable=True, comment='User who made the change (same as user_id for self-service)'),
    sa.Column('changed_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False, comment='Timestamp of change'),
    sa.Column('ip_address', postgresql.INET(), autoincrement=False, nullable=True, comment='IP address of the request'),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True, comment='User agent string from the request'),
    sa.ForeignKeyConstraint(['changed_by'], ['users.id'], name='user_profile_history_changed_by_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_profile_history_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='user_profile_history_pkey'),
    comment='Audit trail for all user profile changes'
    )
    with op.batch_alter_table('user_profile_history', schema=None) as batch_op:
        batch_op.create_index('idx_profile_history_user_changed', ['user_id', sa.text('changed_at DESC')], unique=False)
        batch_op.create_index('idx_profile_history_changed_at', ['changed_at'], unique=False)

    # ### end Alembic commands ###
